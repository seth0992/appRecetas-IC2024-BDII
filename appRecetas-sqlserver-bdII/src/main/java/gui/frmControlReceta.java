/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import modelJDBC.CategoriaJDBC;
import modelJDBC.IngredienteJDBC;
import modelJDBC.RecetaJDBC;

/**
 *
 * @author seth
 */
public class frmControlReceta extends javax.swing.JFrame {

    boolean nuevaReceta = true;
    byte[] datosImagen = null;
    // Instancia de jdbc para el uso de los métodos de categoría
    CategoriaJDBC categoriajdbc = new CategoriaJDBC();
    // Instancia de jdbc para el uso de los métodos de ingredientes
    IngredienteJDBC ingredientesjdbc = new IngredienteJDBC();
   // Instancia de jdbc para el uso de los métodos de ingredientes
    RecetaJDBC recetajdbc = new RecetaJDBC();
    
    DefaultTableModel categoriasSeleccionadas = null;
    DefaultTableModel ingredientesSeleccionados = null;

    /**
     * Creates new form frmControlReceta
     */
    public frmControlReceta() {
        initComponents();
        CargarComboBox();
        inicializarLista();
    }

// Método para inicializar las listas de categorías seleccionadas e ingredientes seleccionados
    private void inicializarLista() {
        // Inicializar el modelo de tabla para las categorías seleccionadas
        categoriasSeleccionadas = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla para las categorías seleccionadas
        categoriasSeleccionadas.addColumn("ID");
        categoriasSeleccionadas.addColumn("Categoría");

        // Inicializar el modelo de tabla para los ingredientes seleccionados
        ingredientesSeleccionados = new DefaultTableModel();

        // Agregar las columnas al modelo de tabla para los ingredientes seleccionados
        ingredientesSeleccionados.addColumn("ID");
        ingredientesSeleccionados.addColumn("Ingredientes");
        ingredientesSeleccionados.addColumn("Cantidad");

        tblCategorias.setModel(categoriasSeleccionadas);
        tblIngredientes.setModel(ingredientesSeleccionados);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombreReceta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        spnTiempoPrep = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        cmbDificultada = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaDescripcion = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        cmbCategorias = new javax.swing.JComboBox<>();
        btnAgregarCat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCategorias = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnBuscarImagen = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        cmbIngredientes = new javax.swing.JComboBox<>();
        btnAgregarIng = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();
        spnCantidad = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        btnLimpiarCat = new javax.swing.JButton();
        btnEliminarCat = new javax.swing.JButton();
        btnGuardarCat = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la receta"));

        jLabel1.setText("Nombre de la Receta:");

        jLabel3.setText("Tiempo Preparación (min):");
        jLabel3.setToolTipText("");

        jLabel4.setText("Dificultad");

        cmbDificultada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fácil", "Medio", "Difícil", "Extrema" }));

        jLabel5.setText("Descripción:");

        txaDescripcion.setColumns(20);
        txaDescripcion.setRows(5);
        jScrollPane2.setViewportView(txaDescripcion);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione las Categorías"));

        cmbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAgregarCat.setText("Agregar");
        btnAgregarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarCatActionPerformed(evt);
            }
        });

        tblCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCategorias);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cmbCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarCat, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarCat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione una imagen"));

        btnBuscarImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/imagen.png"))); // NOI18N
        btnBuscarImagen.setText("      Buscar Imagen");
        btnBuscarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarImagenActionPerformed(evt);
            }
        });

        lblImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/picture.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscarImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBuscarImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione los Ingredientes"));

        cmbIngredientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAgregarIng.setText("Agregar");
        btnAgregarIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarIngActionPerformed(evt);
            }
        });

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblIngredientes);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAgregarIng, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(cmbIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spnCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbIngredientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAgregarIng)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNombreReceta, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(spnTiempoPrep, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(cmbDificultada, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNombreReceta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(spnTiempoPrep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cmbDificultada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Control de Recetas");

        btnLimpiarCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/clean.png"))); // NOI18N
        btnLimpiarCat.setText("Limpiar");
        btnLimpiarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCatActionPerformed(evt);
            }
        });

        btnEliminarCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
        btnEliminarCat.setText("Eliminar");
        btnEliminarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarCatActionPerformed(evt);
            }
        });

        btnGuardarCat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/save.png"))); // NOI18N
        btnGuardarCat.setText("Guardar");
        btnGuardarCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(363, 363, 363)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnGuardarCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiarCat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEliminarCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiarCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardarCat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCatActionPerformed
//        limpiarDatos();
    }//GEN-LAST:event_btnLimpiarCatActionPerformed

    private void btnEliminarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarCatActionPerformed
//        if(idCategoria == 0){
//            JOptionPane.showMessageDialog(this, "Debes seleccionar una categoría para eliminarla", "Error", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        int opcion = JOptionPane.showConfirmDialog(this, "Esta segura que desea eliminar la categoría seleccionada?");
//
//        if(opcion == 0){
//            cat.eliminarCategoria(idCategoria);
//            JOptionPane.showMessageDialog(this, "Se elimino la Categoría");
//            limpiarDatos();
//            cargarDatos(null);
//        }
    }//GEN-LAST:event_btnEliminarCatActionPerformed

    private void btnGuardarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCatActionPerformed

        String nombreReceta = txtNombreReceta.getText();
        int tiempoPreparacion = (int) spnTiempoPrep.getValue();
        int dificultada = cmbDificultada.getSelectedIndex();
        String descripcion = txaDescripcion.getText();

        Object[][] categorias = convertirModeloAArray(categoriasSeleccionadas);
        Object[][] ingredientes = convertirModeloAArray(ingredientesSeleccionados);

        // Validaciones
        if (nombreReceta.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El nombre de la receta no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

        if (tiempoPreparacion <= 0) {
            JOptionPane.showMessageDialog(this, "El tiempo de preparación debe ser mayor que cero", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

        if (descripcion.isEmpty()) {
            JOptionPane.showMessageDialog(this, "La descripción de la receta no puede estar vacía", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

        if (categorias.length == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos una categoría para la receta", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

        if (ingredientes.length == 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un ingrediente para la receta", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método si hay un error
        }

         // Si pasa todas las validaciones, continuar con el proceso de guardado
        int row = 0;
        if (nuevaReceta) {//
            row = recetajdbc.registrarReceta(nombreReceta,descripcion,tiempoPreparacion,dificultada, datosImagen, categorias, ingredientes); //Llamar al metodo que encarga de registrar la receta

            if (row > 0) {
                JOptionPane.showMessageDialog(this, "Se Registro la receta");
            } else {
                JOptionPane.showMessageDialog(this, "No Se Registro la receta", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } 
        
        
//        else {
//            row = cat.modificarCategoria(idCategoria, nombreCat); //Llamar al metodo que encarga de registrar la categoria
//            if (row > 0) {
//                JOptionPane.showMessageDialog(this, "Se Modifico la Categoría");
//            } else {
//                JOptionPane.showMessageDialog(this, "No Se Modifico la Categoría", "Error", JOptionPane.ERROR_MESSAGE);
//                return;
//            }
//        }
//
//        limpiarDatos();
//        cargarDatos(null);
    }//GEN-LAST:event_btnGuardarCatActionPerformed

    // Método que se ejecuta cuando se hace clic en el botón "Buscar Imagen"
    private void btnBuscarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarImagenActionPerformed
        // Crear un objeto JFileChooser para seleccionar un archivo
        JFileChooser fileChooser = new JFileChooser();
        // Crear un filtro de archivos para mostrar solo imágenes
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de imagen", "jpg", "jpeg", "png", "gif");

        // Establecer el filtro en el JFileChooser
        fileChooser.setFileFilter(filter);

        fileChooser.showOpenDialog(this); // Mostrar el diálogo de selección de archivo

        // Obtener el archivo seleccionado por el usuario
        File archivo = fileChooser.getSelectedFile();

        // Verificar si se seleccionó un archivo
        if (archivo != null) {
            try {
                // Obtener la ruta del archivo seleccionado
                String ruta = archivo.getPath();

                // Leer los datos de la imagen como un arreglo de bytes
                datosImagen = leerImagenComoBytes(ruta);

                // Crear un ImageIcon con la ruta de la imagen
                ImageIcon icon = new ImageIcon(ruta);

                // Escalar la imagen para que tenga un tamaño de 200x200 píxeles
                Image image = icon.getImage().getScaledInstance(200, 200, java.awt.Image.SCALE_SMOOTH);
                icon = new ImageIcon(image);

                // Establecer el ImageIcon escalado en un JLabel para mostrar la imagen
                lblImage.setIcon(icon);
            } catch (IOException ex) {
                // Manejar la excepción en caso de que ocurra un error al leer la imagen
                Logger.getLogger(frmReceta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnBuscarImagenActionPerformed

    // Método para manejar el evento de clic en el botón "Agregar Ingrediente"
    private void btnAgregarIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarIngActionPerformed
        // Verificar si se ha seleccionado un elemento en el JComboBox
        if (cmbIngredientes.getSelectedIndex() == -1) {
            // Si no se ha seleccionado ningún elemento, mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un ingrediente", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método porque la validación ha fallado
        }

        // Obtener el ingrediente seleccionado del JComboBox
        String selectedItem = (String) cmbIngredientes.getSelectedItem();
        // Obtener el ID del ingrediente (el primer elemento después de separar la cadena por el guión)
        int idIngrediente = Integer.parseInt(selectedItem.split(" - ")[0]);
        // Obtener el nombre del ingrediente (el segundo elemento después de separar la cadena por el guión)
        String ingrediente = selectedItem.split(" - ")[1];
        // Obtener la cantidad ingresada desde el JSpinner
        int cantidad = (int) spnCantidad.getValue();

        // Verificar si la cantidad es válida (no puede ser cero o negativa)
        if (cantidad <= 0) {
            // Mostrar un mensaje de error si la cantidad es cero o negativa
            JOptionPane.showMessageDialog(this, "La cantidad del ingrediente no puede ser cero o negativa", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Agregar una nueva fila al modelo de tabla de ingredientes seleccionados
        ingredientesSeleccionados.addRow(new Object[]{idIngrediente, ingrediente, cantidad});
        // Establecer el modelo de tabla de ingredientes seleccionados en la tabla
        tblIngredientes.setModel(ingredientesSeleccionados);
    }//GEN-LAST:event_btnAgregarIngActionPerformed

    // Método para manejar el evento de clic en el botón "Agregar Categoría"
    private void btnAgregarCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarCatActionPerformed

        // Verificar si se ha seleccionado un elemento en el JComboBox
        if (cmbCategorias.getSelectedIndex() == -1) {
            // Si no se ha seleccionado ningún elemento, mostrar un mensaje de error
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un Categoría", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Salir del método porque la validación ha fallado

        }
        String selectedItem = (String) cmbCategorias.getSelectedItem();
        // Obtener el ID del ingrediente (el primer elemento después de separar la cadena por el guión)
        int idCategoria = Integer.parseInt(selectedItem.split(" - ")[0]);
        // Obtener el nombre del ingrediente (el segundo elemento después de separar la cadena por el guión)
        String categoria = selectedItem.split(" - ")[1];

        // Agregar una nueva fila al modelo de tabla de ingredientes seleccionados
        categoriasSeleccionadas.addRow(new Object[]{idCategoria, categoria});
        // Establecer el modelo de tabla de ingredientes seleccionados en la tabla
        tblCategorias.setModel(categoriasSeleccionadas);
    }//GEN-LAST:event_btnAgregarCatActionPerformed

    // Método para leer una imagen y devolver sus datos como un arreglo de bytes
    private static byte[] leerImagenComoBytes(String rutaImagen) throws IOException {
        // Crear un objeto File con la ruta de la imagen
        File file = new File(rutaImagen);

        // Crear un arreglo de bytes del tamaño del archivo de la imagen
        byte[] datosImagen = new byte[(int) file.length()];

        // Usar un bloque try-with-resources para asegurar que el FileInputStream se cierre correctamente
        try (FileInputStream fileInputStream = new FileInputStream(file)) {
            // Leer los datos de la imagen en el arreglo de bytes
            fileInputStream.read(datosImagen);
        }

        // Devolver el arreglo de bytes que contiene los datos de la imagen
        return datosImagen;
    }

    // Método para cargar los JComboBox de ingredientes y categorías
    private void CargarComboBox() {
        // Consultar los ingredientes y categorías de la base de datos y obtener los datos en forma de DefaultTableModel
        DefaultTableModel modeloTablaIngredientes = ingredientesjdbc.consultarIngrediente(null);
        DefaultTableModel modeloTablaCategoria = categoriajdbc.consultarCategorias(null);

        // Crear un ComboBoxModel personalizado con los datos de los ingredientes
        ComboBoxModel<String> comboBoxModelIngredientes = new DefaultComboBoxModel<>(obtenerDatosComboBox(modeloTablaIngredientes));

        // Crear un ComboBoxModel personalizado con los datos de las categorías
        ComboBoxModel<String> comboBoxModelCategoria = new DefaultComboBoxModel<>(obtenerDatosComboBox(modeloTablaCategoria));

        // Establecer el ComboBoxModel en el JComboBox de ingredientes
        cmbIngredientes.setModel(comboBoxModelIngredientes);

        // Establecer el ComboBoxModel en el JComboBox de categorías
        cmbCategorias.setModel(comboBoxModelCategoria);
    }

// Método para obtener los datos de un DefaultTableModel y formatearlos para un JComboBox
    private String[] obtenerDatosComboBox(DefaultTableModel modeloTabla) {
        // Obtener el número de filas en el modelo de tabla
        int filas = modeloTabla.getRowCount();

        // Crear un arreglo de cadenas para almacenar los elementos del JComboBox
        String[] items = new String[filas];

        // Iterar sobre cada fila del modelo de tabla
        for (int i = 0; i < filas; i++) {
            // Obtener el valor de la columna "id" en la fila actual
            int id = (int) modeloTabla.getValueAt(i, 0);
            // Obtener el valor de la columna "nombre" en la fila actual
            String nombre = (String) modeloTabla.getValueAt(i, 1);

            // Crear una cadena con el formato "id - nombre" y agregarla al arreglo de elementos del JComboBox
            items[i] = id + " - " + nombre;
        }

        // Devolver el arreglo de cadenas formateadas
        return items;
    }

    /**
     * Convierte un DefaultTableModel a un arreglo bidimensional de objetos.
     *
     * @param modelo El DefaultTableModel que se desea convertir.
     * @return Un arreglo bidimensional de objetos que representa los datos del
     * modelo.
     */

    public Object[][] convertirModeloAArray(DefaultTableModel modelo) {
        // Obtener el número de filas y columnas del modelo
        int filas = modelo.getRowCount();
        int columnas = modelo.getColumnCount();

        // Crear un arreglo bidimensional para almacenar los datos
        Object[][] datos = new Object[filas][columnas];

        // Iterar sobre cada fila y columna del modelo
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                // Obtener el valor de la celda en la fila i y columna j
                datos[i][j] = modelo.getValueAt(i, j);
            }
        }

        // Devolver el arreglo de datos
        return datos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmControlReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmControlReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmControlReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmControlReceta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmControlReceta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCat;
    private javax.swing.JButton btnAgregarIng;
    private javax.swing.JButton btnBuscarImagen;
    private javax.swing.JButton btnEliminarCat;
    private javax.swing.JButton btnGuardarCat;
    private javax.swing.JButton btnLimpiarCat;
    private javax.swing.JComboBox<String> cmbCategorias;
    private javax.swing.JComboBox<String> cmbDificultada;
    private javax.swing.JComboBox<String> cmbIngredientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblImage;
    private javax.swing.JSpinner spnCantidad;
    private javax.swing.JSpinner spnTiempoPrep;
    private javax.swing.JTable tblCategorias;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTextArea txaDescripcion;
    private javax.swing.JTextField txtNombreReceta;
    // End of variables declaration//GEN-END:variables
}
